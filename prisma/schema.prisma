generator client {
  provider = "prisma-client-js"
  seed     = "ts-node --transpile-only ./prisma/seed.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @default(autoincrement()) @id
  email               String    @unique
  name                String?
  password            String
  role                String    @default("COLABORADOR")
  address             Address?  @relation
  position            String?  
  SelfAssessments     SelfAssessment[]
  PeerReviewsGiven    PeerReview[] @relation("PeerReviewsGiven")
  PeerReviewsReceived PeerReview[] @relation("PeerReviewsReceived")
  EqualizationsGiven  Equalization[] @relation("EqualizationsGiven")
  EqualizationsReceived Equalization[] @relation("EqualizationsReceived")
}

model Address {
  id       Int    @default(autoincrement()) @id
  street   String
  district String
  city     String
  state    String
  country  String
  number   String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
}

model Criterion {
  id                  Int                   @default(autoincrement()) @id
  name                String
  type                String
  SelfAssessmentScores SelfAssessmentScore[]
}

model SelfAssessment {
  id                   Int                  @default(autoincrement()) @id
  user                 User                 @relation(fields: [userId], references: [id])
  userId               Int
  cycle                Cycle                @relation(fields: [cycleId], references: [id])
  cycleId              Int
  date                 DateTime
  meanGrade            Float
  SelfAssessmentScores SelfAssessmentScore[]
}

model SelfAssessmentScore {
  id                Int             @default(autoincrement()) @id
  selfAssessment    SelfAssessment  @relation(fields: [selfAssessmentId], references: [id])
  selfAssessmentId  Int
  criterion         Criterion       @relation(fields: [criterionId], references: [id])
  criterionId       Int
  grade             Float
  justification     String
}

model Cycle {
  id               Int              @default(autoincrement()) @id
  name             String
  startDate        DateTime
  endDate          DateTime
  SelfAssessments  SelfAssessment[]
  PeerReviews      PeerReview[]
  Equalizations    Equalization[]
}

model PeerReview {
  id                Int            @default(autoincrement()) @id
  evaluator         User           @relation("PeerReviewsGiven", fields: [evaluatorId], references: [id])
  evaluatorId       Int
  evaluated         User           @relation("PeerReviewsReceived", fields: [evaluatedId], references: [id])
  evaluatedId       Int
  cycle             Cycle          @relation(fields: [cycleId], references: [id])
  cycleId           Int
  meanGrade         Float
  PeerReviewScores  PeerReviewScore?
}

model PeerReviewScore {
  id             Int            @default(autoincrement()) @id
  assessment     PeerReview     @relation(fields: [assessmentId], references: [id])
  assessmentId   Int @unique
  behavior       Int  
  tecniques      Int 
  toImprove      String 
  toPraise       String  
}

model Equalization {
  id             Int      @default(autoincrement()) @id
  evaluator      User     @relation("EqualizationsGiven", fields: [evaluatorId], references: [id])
  evaluatorId    Int
  evaluated      User     @relation("EqualizationsReceived", fields: [evaluatedId], references: [id])
  evaluatedId    Int
  cycle          Cycle    @relation(fields: [cycleId], references: [id])
  cycleId        Int
  date           DateTime
  finalGrade     Float
}
